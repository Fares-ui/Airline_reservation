from abc import ABC, abstractmethod
 from multipledispatch import dispatch
from datetime import datetime

class People(ABC):
    def __init__(self, Name, Age, phone,address,ID):
        self.Name=Name
        self.Age=Age
        self.phone=phone
        self.address=address
        self.ID=ID 

    @abstractmethod
    def preview_info(self):
        pass


class Passport:
    def __init__(self,birth_place,proffession,passport_no):
        self.birth_place=birth_place
        self.proffession=proffession
        self.passport_no=passport_no

class Passenger(People,Passport):
    def __init__(self, Name, Age ,phone, address,birth_place,proffession,passport_no):
        People().__init__(Name, Age, phone, address)
        Passport().__init__(birth_place,proffession,passport_no)


        def Takepass_info(self):
         pass_no=input("Enter Passport No:")
        #search in database
         self.preview_info()
        
 #data base call, user enters passport no if it is found in the database then preview_info is called if not then fail massage apear       
    def preview_info(self):
            print(" Your Passport Details:")
            print("Name:",self.Name)
            print("Age:",self.Age)
            print("Phone:",self.phone)
            print("Address:",self.address)
            print("Birth Place:",self.birth_place)
            print("Profession:",self.proffession)
            print("Passport No:",self.passport_no)
    
    
class ticket():
    def __init__(self, ticket_no, seat_no, flight_no, date, time, destination):
        self.ticket_no=ticket_no
        self.seat_no=seat_no
        self.flight_no=flight_no
        self.date=date
        self.time=time
        self.destination=destination

#after making a reservation user can see the ticket details

    def ticket_details(self):
        print("Your ticket details  ")
        print("Ticket No:",self.ticket_no)
        print("Seat No:",self.seat_no)
        print("Flight No:",self.flight_no)
        print("Date:",self.date)
        print("Time:",self.time)
        print("Destination:",self.destination)
        
        #pilot class
class Pilot(People):
    def __init__(self,Name,Age,phone,address,ID,flight_hours : int,license_num : int,cirtefication : list[str],flights : int):
        super().__init__(Name,Age,phone,address,ID)
        self.flight_hours=flight_hours
        self.license_num=license_num
        self.cirtefication=cirtefication
        self.flights=flights
    def assign_flight(self,done:int):
        self.flights+=done #done her is number of flights that is done it will be added to the number of flights
    def flight_hours(self):
        return self.flight_hours
    def display_info(self):
        print(f"Pilot Name : {self.Name} , Pilot Age: {self.Age}")
        print(f"Pilot Phone number: {self.phone}, Piolt Address: {self.address}")  
        print(f"Pilot License: {self.license_num} , Pilot ID : {self.ID}")
        print(f"Pilot cirtefications : {','.join(self.cirtefication)}")
    @abstractmethod
    def possetion(self):
        pass    
# sub class to print the Pilot possetion and how many hours and flight_hours and cirtefications dose he take to be in this possetion    
class MilitaryPilot(Pilot):
    def __init__(self, flight_hours, license_num, certifications, clearance_level):
        super().__init__(flight_hours, license_num, certifications)
        self.clearance_level = clearance_level

    def possesion(self):
        print(f"This pilot possesses clearance level: {self.clearance_level}")    
