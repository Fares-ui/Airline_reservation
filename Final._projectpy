from abc import ABC, abstractmethod
from typing import List
from datetime import datetime

# -------------------- Abstract Base People -------------------- #
class People(ABC):
    def __init__(self, name: str, age: int, phone: str, address: str, ID: int):
        self.name = name
        self.age = age
        self.phone = phone
        self.address = address
        self.ID = ID

    def update_info(self, name=None, age=None, ID=None, phone_number=None, email=None, address=None):
        if name:
            self.name = name
        if age:
            self.age = age
        if ID:
            self.ID = ID
        if phone_number:
            self.phone_number = phone_number
        if email:
            self.email = email
        if address:
            self.address = address

    @abstractmethod
    def preview_info(self):
        pass


# -------------------- Passport & Passenger -------------------- #
class Passport:
    def __init__(self, birth_place: str, profession: str, passport_no: int):
        self.birth_place = birth_place
        self.profession = profession
        self.passport_no = passport_no


class Passenger(People, Passport):
    def __init__(self, name: str, age: int, phone: int, address: str, ID: int,
                 birth_place: str, profession: str, passport_no: int):
        People.__init__(self, name, age, phone, address, ID)
        Passport.__init__(self, birth_place, profession, passport_no)

    def preview_info(self):
        print("Your Passport Details:")
        print(f"Name: {self.name}")
        print(f"Age: {self.age}")
        print(f"Phone: {self.phone}")
        print(f"Address: {self.address}")
        print(f"Birth Place: {self.birth_place}")
        print(f"Profession: {self.profession}")
        print(f"Passport No: {self.passport_no}")


# -------------------- Seat -------------------- #
class Seat:
    def __init__(self, seat_number: int, class_type: str, price: float, available: bool = True):
        self.seat_number = seat_number
        self.class_type = class_type
        self.price = price
        self.available = available

    def book_seat(self):
        if self.available:
            self.available = False
            return True
        return False

    def display_info(self):
        status = "Available" if self.available else "Booked"
        print(f"Seat Number: {self.seat_number}, Class: {self.class_type}, Price: ${self.price}, Status: {status}")


# -------------------- Ticket -------------------- #
class Ticket:
    def __init__(self, ticket_no: int, seat_no: int, flight_no: int, date: str, time: str, destination: str):
        self.ticket_no = ticket_no
        self.seat_no = seat_no
        self.flight_no = flight_no
        self.date = date
        self.time = time
        self.destination = destination

    def ticket_details(self):
        print("\n🎫 Your Ticket Details:")
        print(f"Ticket No: {self.ticket_no}")
        print(f"Seat No: {self.seat_no}")
        print(f"Flight No: {self.flight_no}")
        print(f"Date: {self.date}")
        print(f"Time: {self.time}")
        print(f"Destination: {self.destination}")



# -------------------- Baggage -------------------- #
class Baggage:
    def __init__(self, baggage_id, passenger, weight, baggage_fee, status):
        self.baggage_id = baggage_id
        self.passenger = passenger
        self.weight = weight
        self.baggage_fee = baggage_fee
        self.status = status

    def calculate_fee(self):
        # Calculate additional fees
        max_weight = 23
        extra_fee_per_kg = 10
        if self.weight > max_weight:
            excess_weight = self.weight - max_weight
            extra_fee = excess_weight * extra_fee_per_kg
            return extra_fee
        return 0

    def check_baggage_weight(self):
        # checking the extra_fee of weight
        extra_fee = self.calculate_fee()

        if extra_fee > 0:
            print(f"Baggage ID {self.baggage_id}: Your baggage exceeds the limit.")
            print(f"Excess Weight: {self.weight - 23} kg | Extra Fee: ${extra_fee}")
            self.baggage_fee += extra_fee
        else:
            print(f"Baggage ID {self.baggage_id}: Your baggage is within the allowed limit.")

    def update_baggage_status(self, new_status):
        # check the status of baggage invalid or not from the list
        valid_statuses = ["checked in", "loaded", "in transit", "delivered", "lost"]
        if new_status in valid_statuses:
            self.status = new_status
            print(f"Baggage ID {self.baggage_id} status updated to: {self.status}")
        else:
            print(f"Invalid status: {new_status}. Please choose from {valid_statuses}")

# -------------------- Flight -------------------- #
class Flight:
    def __init__(self, flight_number: int, origin: str, destination: str):
        self.flight_number = flight_number
        self.origin = origin
        self.destination = destination
        self.seats: List[Seat] = []

    def add_seat(self, seat: Seat):
        self.seats.append(seat)

    def display_seats(self):
        print(f"\n🛫 Flight {self.flight_number} — {self.origin} ➡ {self.destination}")
        print("Available Seats:")
        for seat in self.seats:
            seat.display_info()

    def book_seat(self, seat_number: int, passenger: Passenger, date: str, time: str):
        for seat in self.seats:
            if seat.seat_number == seat_number:
                if seat.book_seat():
                    print(f"\n✅ Seat {seat_number} booked for {passenger.name}.")
                    ticket = Ticket(
                        ticket_no=hash(f"{seat_number}{self.flight_number}{passenger.ID}") % 100000,
                        seat_no=seat_number,
                        flight_no=self.flight_number,
                        date=date,
                        time=time,
                        destination=self.destination
                    )
                    ticket.ticket_details()
                    return ticket
                else:
                    print(f"❌ Seat {seat_number} is already booked.")
                    return None
        print(f"❌ Seat {seat_number} not found.")
        return None


# -------------------- Airport -------------------- #
class Airport:
    def __init__(self, airport_name, airport_location, airport_code):
        self.__airport_name = airport_name
        self.__airport_location = airport_location
        self.__airport_code = airport_code
        self.airport_flights = []

    def get_airport_flights(self):
        return self.airport_flights

    def get_airport_name(self):
        return self.__airport_name

    def get_airport_address(self):
        return self.__airport_location

    def get_airport_code(self):
        return self.__airport_code

    def add_flights(self, flight):
        self.airport_flights.append(flight)

    def set_airport_name(self, newname):
        self.__airport_name = newname

    def set_airport_address(self, newlocation):
        self.__airport_location = newlocation

    def set_airport_code(self, newcode):
        self.__airport_code = newcode



# -------------------- Airline -------------------- #
class Airline:
     def __init__(self, airline_name: str, country: str, iata_code: str, fleet_size: int):
        self.airline_name = airline_name
        self.airline_country = country
        self.airline_iata_code = iata_code  # example -> "MS" for EgyptAir
        self.airline_fleet_size = fleet_size #fleet size means -> The total number of  planes that an airline owns or operates
        self.airline_flights = []  # List to hold flights operated by the airline

     def add_flight_to_airline(self,flight):
        self.airline_flights.append(flight)

     def get_flight_schedule(self):
        return self.airline_flights
    
     def airline_datails(self):
        print(f"Airline name: {self.airline_name} ")
        print(f"Airline country: {self.airline_country} ")
        print(f"Airline fleet_size: {self.airline_fleet_size} ")
        print(f"Airline iata code: {self.airline_iata_code} ")
        #print(f" Airline Flights: ) #!!!!fixed later



# -------------------- Admin -------------------- #
class Admin(People):
    def __init__(self, name: str, age: int, phone: str, address: str, ID: int, admin_level: str):
        super().__init__(name, age, phone, address, ID)
        self.admin_level = admin_level  # Example:  "Airport Manager"
    
    def add_airline(self, airline_list, airline):
        airline_list.append(airline)

    def remove_airline(self, airline_list, airline_id):
        return [a for a in airline_list if a.airline_id != airline_id]

    def update_flight_schedule(self, airline, flight_id, new_departure, new_arrival):
        for flight in airline.flights:
            if flight.flight_id == flight_id:
                flight.departure_time = new_departure
                flight.arrival_time = new_arrival
                return True
        return False


# -------------------- pilot -------------------- #
class Pilot(People):
    def __init__(self, name: str, age: int, phone: int, address: str, ID: str,
                 flight_hours: int, license_num: int, certification: List[str], flights: int):
        super().__init__(name, age, phone, address, ID)
        self.flight_hours = flight_hours
        self.license_num = license_num
        self.certification = certification
        self.flights = flights

    def assign_flight(self, completed_flights: int):
        #Updates the number of completed flights.
        self.flights += completed_flights # completed_flights her is number of flights that is done it will be added to the number of flights

    def get_flight_hours(self) -> int: #-> int returns flight_hours int only
        #Returns total flight hours.
        return self.flight_hours

    def display_info(self):
        #Displays pilot's information.
        print(f"Pilot Name: {self.name}, Age: {self.age}")
        print(f"Pilot Phone: {self.phone}, Address: {self.address}")
        print(f"Pilot License Number: {self.license_num}, Pilot ID: {self.ID}")
        print(f"Pilot Certifications: {', '.join(self.certification)}") # (join )converts lists of strings into a formatted string.
        print(f"Pilot Total Flights: {self.flights}, Flight Hours: {self.flight_hours}")

  # sub class to print the Pilot possetion and how many hours and flight_hours and cirtefications dose he take to be in this possetion    
    @abstractmethod
    def possession(self):
        pass


class MilitaryPilot(Pilot):
      def __init__(self, name: str, age: str, phone: str, address: str, ID: str,
                 flight_hours: int, license_num: int, certification: List[str],
                 flights: int, clearance_level: str):
        super().__init__(name, age, phone, address, ID, flight_hours, license_num, certification, flights)
        self.clearance_level = clearance_level

      def possession(self):
        """Displays the pilot's clearance level."""
        print(f"This pilot possesses clearance level: {self.clearance_level}")

      def preview_info(self):
        #Implements the abstract method from People.
        self.display_info()
        print(f"Clearance Level: {self.clearance_level}")


# -------------------- Payment -------------------- #

class Payment:
    def __init__(self, payment_id: int, ticket: 'Ticket', payment_method: str, amount: float, status: str, payment_date: str = None):
        self.payment_id = payment_id
        self.ticket = ticket  # Link to the Ticket object
        self.payment_method = payment_method
        self.amount = amount
        self.status = status  # Status can be 'Pending', 'Completed', 'Failed'
        self.payment_date = payment_date or datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # If no date, use current time
    
    def process_payment(self):
        
        if self.status != 'Completed':
            self.status = 'Completed'
            print(f"Payment for Ticket No: {self.ticket.ticket_no} processed successfully.")
        else:
            print(f"Payment for Ticket No: {self.ticket.ticket_no} has already been processed.")
    
    def display_payment_details(self):
        #Display the details of the payment.
        print(f"Payment ID: {self.payment_id}")
        print(f"Ticket No: {self.ticket.ticket_no}")
        print(f"Amount: ${self.amount}")
        print(f"Payment Method: {self.payment_method}")
        print(f"Status: {self.status}")
        print(f"Payment Date: {self.payment_date}")

class Ticket:
    def __init__(self, ticket_no: int, seat_no: int, flight_no: int, date: str, time: str, destination: str):
        self.ticket_no = ticket_no
        self.seat_no = seat_no
        self.flight_no = flight_no
        self.date = date
        self.time = time
        self.destination = destination
        self.payment = None  # Initially no payment is linked to the ticket

    def link_payment(self, payment: Payment):
        #Link a Payment object to this ticket.
        self.payment = payment
        print(f"Payment linked to Ticket No: {self.ticket_no}")
    
    def ticket_details(self):
        #Displays ticket details after reservation.
        print("Your Ticket Details:")
        print(f"Ticket No: {self.ticket_no}")
        print(f"Seat No: {self.seat_no}")
        print(f"Flight No: {self.flight_no}")
        print(f"Date: {self.date}")
        print(f"Time: {self.time}")
        print(f"Destination: {self.destination}")
        
        if self.payment:
            self.payment.display_payment_details()
        else:
            print("No payment linked to this ticket.")
        


# -------------------- Demo: Booking Flow -------------------- #

# Create a passenger
passenger1 = Passenger("Mohamed", 25, 20010653, "Alexandria", 325044561, "Cairo", "Teacher", 32561320786452)
passenger1.preview_info()

# Create seats
seat1 = Seat(14, "Economy", 10000)
seat2 = Seat(15, "Economy", 12000)

# Create a flight and add seats
flight1 = Flight(8452, "Cairo", "New York")
flight2 = Flight(8472, "Cairo", "USA")
flight1.add_seat(seat1)
flight1.add_seat(seat2)



# Create instances of the Baggage class
baggage1 = Baggage(101, "Mohamed", 23, 0, 'checked-in')
baggage2 = Baggage(102, "Sara", 18, 10, "loaded")
baggage3 = Baggage(103, "Ali", 30, 15, "in transit")

# Update baggage status
baggage1.update_baggage_status("in transit")
baggage2.update_baggage_status("lost")
baggage3.update_baggage_status("delivered")

# Check baggage weight
baggage1.check_baggage_weight()
baggage2.check_baggage_weight()
baggage3.check_baggage_weight()

# Create an airport and add flight
airport1 = Airport("Cairo International Airport", "Cairo", "CAI")
airport1.add_flights(flight1)

# Show all flights in the airport
print("\n🌐 Flights at Airport:")
for f in airport1.get_airport_flights():
    print(f"- {f.flight_number} | {f.origin} ➡ {f.destination}")

# Show available seats
flight1.display_seats()

# Book a seat
flight1.book_seat(14, passenger1, "20/5/2025", "2am")

# Try booking the same seat again
flight1.book_seat(14, passenger1, "20/5/2025", "2am")

# Display seats after booking
flight1.display_seats()

# Example of creating and linking the payment to a ticket
ticket1 = Ticket(4511, 10, 1545, "20/5/2025", "2am", "USA")

# Create a Payment object
payment1 = Payment(payment_id=101, ticket=ticket1, payment_method="Credit Card", amount=500.0, status="Pending")

# Link payment to the ticket
ticket1.link_payment(payment1)

# Process the payment
payment1.process_payment()

# Display the ticket details along with payment information
ticket1.ticket_details()

# Create instances of pilot class (Later)

# Create instances of Airline class 
airline1 = Airline("EgyptAir", "Egypt", "MS", 67)
airline2 = Airline("Air Cairo", "Egypt", "SM", 20)
airline3 = Airline("Nile Air", "Egypt", "NP", 10)
airline1.add_flight_to_airline(flight1)
airline2.add_flight_to_airline(flight2)
airline1.airline_datails()
