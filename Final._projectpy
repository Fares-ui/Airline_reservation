from abc import ABC, abstractmethod
import dispatch
from datetime import datetime

class People(ABC):
    def __init__(self, Name, Age, phone,address):
        self.Name=Name
        self.Age=Age
        self.phone=phone
        self.address=address

    @abstractmethod
    def preview_info(self):
        pass


class Passport:
    def __init__(self,birth_place,proffession,passport_no):
        self.birth_place=birth_place
        self.proffession=proffession
        self.passport_no=passport_no

class Passenger(People,Passport):
    def __init__(self, Name, Age ,phone, address,birth_place,proffession,passport_no):
        People().__init__(Name, Age, phone, address)
        Passport().__init__(birth_place,proffession,passport_no)


        def Takepass_info(self):
         pass_no=input("Enter Passport No:")
        #search in database
         self.preview_info()
        
 #data base call, user enters passport no if it is found in the database then preview_info is called if not then fail massage apear       
    def preview_info(self):
            print(" Your Passport Details:")
            print("Name:",self.Name)
            print("Age:",self.Age)
            print("Phone:",self.phone)
            print("Address:",self.address)
            print("Birth Place:",self.birth_place)
            print("Profession:",self.proffession)
            print("Passport No:",self.passport_no)
    
    
class ticket():
    def __init__(self, ticket_no, seat_no, flight_no, date, time, destination):
        self.ticket_no=ticket_no
        self.seat_no=seat_no
        self.flight_no=flight_no
        self.date=date
        self.time=time
        self.destination=destination

#after making a reservation user can see the ticket details

    def ticket_details(self):
        print("Your ticket details  ")
        print("Ticket No:",self.ticket_no)
        print("Seat No:",self.seat_no)
        print("Flight No:",self.flight_no)
        print("Date:",self.date)
        print("Time:",self.time)
        print("Destination:",self.destination)
class Baggage:
    def __init__(self,baggage_id, passenger, weight, baggage_fee, status):
        self.baggage_id=baggage_id
        self.passenger=passenger
        self.weight=weight
        self. baggage_fee= baggage_fee
        self.status=status

    def calculate_fee(self):
    # Calculate additional fees
        max_weight = 23
        extra_fee_per_kg = 10
        if self.weight > max_weight:
            excess_weight = self.weight - max_weight
            extra_fee = excess_weight * extra_fee_per_kg
            return extra_fee
        return 0

    def check_baggage_weight(self):
    # checking the extra_fee of weight
        extra_fee = self.calculate_fee()

        if extra_fee > 0:
            print(f"Baggage ID {self.baggage_id}: Your baggage exceeds the limit.")
            print(f"Excess Weight: {self.weight - 23} kg | Extra Fee: ${extra_fee}")
            self.baggage_fee += extra_fee
        else:
            print(f"Baggage ID {self.baggage_id}: Your baggage is within the allowed limit.")

    def update_baggage_status(self, new_status):# check the status of baggage invalid or not from the list
        valid_statuses = ["checked in","loaded","in transit","delivered","lost"]
        if new_status in valid_statuses:
            self.status = new_status
            print(f"Baggage ID{self.baggage_id} status updated to :{self.status}")
        else:
            print(f"Invalid status: {new_status}. Please choose from {valid_statuses}")
baggage1 = Baggage(101, "Mohamed", 23, 0, "Checked-in")
baggage2 = Baggage(102, "Sara", 18, 10, "Loaded")
baggage3 = Baggage(103, "Ali", 30, 15, "In Transit")
baggage1.update_baggage_status("In Transit")
baggage2.update_baggage_status("Lost")
baggage3.update_baggage_status("On Hold")



        
        
